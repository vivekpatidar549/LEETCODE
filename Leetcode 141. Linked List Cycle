class Solution {
public:
    bool hasCycle(ListNode *head) {
        /*ListNode * temp=head;
        map <ListNode*,bool> visited;

        while(temp!=NULL ){
            if(visited[temp]==1){
                return true;
            }
            visited[temp]=1;
            temp=temp->next;
        }
        if(head==NULL){
            return false;
        }
        if(temp==head){
            return false;
        }
        return false;*/


        // floyd cycle detection algo

        if(head==NULL) return false;
        if(head->next==NULL) return false;
        ListNode * slow=head;
        ListNode* fast=head;
        while(slow!=NULL && fast!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;
            }
            slow=slow->next;
            if(slow==fast){
            return true;
        }
        }
        
        return false;

    }
};
